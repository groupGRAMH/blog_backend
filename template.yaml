AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python

  Sample SAM Template for python


Globals:
  Function:
    Timeout: 3

Resources:
  MyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CRUDPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt BlogTable.Arn

  createFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: myfunctions/
      Handler: create_blog.lambda_handler
      Runtime: python3.10
      Role: !GetAtt MyFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get

  deleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: myfunctions/
      Handler: delete_blog.lambda_handler
      Runtime: python3.10
      Role: !GetAtt MyFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get
  
  getFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: myfunctions/
      Handler: get_blogs.lambda_handler
      Runtime: python3.10
      Role: !GetAtt MyFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get

  filterFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: myfunctions/
      Handler: filter_search.lambda_handler
      Runtime: python3.10
      Role: !GetAtt MyFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get
  
  updateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: myfunctions/
      Handler: update_blog.lambda_handler
      Runtime: python3.10
      Role: !GetAtt MyFunctionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogTable
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get

  BlogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: BlogTable

    

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  BlogTable:
    Description: "DynamoDB table ARN"
    Value: !GetAtt BlogTable.Arn
